(* Coursera Programming Languages, Homework 3, Provided Code *)

exception NoAnswer

datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

(**** for the challenge problem only ****)

datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** you can put all your code here ****)


fun only_capitals strs = List.filter (fn str => Char.isUpper(String.sub(str,0))) strs

fun longest_string1 strs = foldl (fn (x, acc) => if String.size x > String.size acc then x else acc ) "" strs

fun longest_string2 strs = foldl (fn (x, acc) => if String.size x >= String.size acc then x else acc ) "" strs

fun longest_string_helper f strs = foldl (fn (x, acc) => if f(String.size x, String.size acc) then x else acc ) "" strs

fun greater_than (x,y) = x > y
fun greater_than_equal (x,y) = x >= y
					
val longest_string3 = longest_string_helper greater_than
					    
val longest_string4 = longest_string_helper greater_than_equal

val longest_capitalized = longest_string1 o only_capitals 

val rev_string = implode o rev o explode

fun first_answer func_opt alist =
    case alist of
	[] => raise NoAnswer
      | x :: xs => case func_opt x of
		       NONE => first_answer func_opt xs
		     | SOME i => i 

fun all_answers func_opt alist =
    case alist of
	[] => SOME []
      | x :: xs => case (func_opt(x), all_answers func_opt xs) of
		       (SOME i, SOME j) => SOME (i@j)
		     | (_, _) => NONE

val count_wildcards = g (fn x => 1) (fn y => 0)

val count_wild_and_variable_lengths = g (fn x => 1) (fn str => String.size str)

fun count_some_var (str, patt) = g (fn _ => 0) (fn s => if s = str then 1 else 0) patt	

fun check_pat p =
    let
	fun str_list p =
	    case p of
		Variable x => [x]
	      | TupleP list => foldl (fn (pat, accum) => (str_list pat) @ accum) [] list
	      | _ => []
	fun unique_check strlist =
	    exists f strlist
    in
	
    end
	
